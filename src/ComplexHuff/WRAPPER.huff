#include './Complex.huff'

#define function addZ(int256 , int256 , int256 , int256) returns (int256 ,int256)
#define function subZ(int256 , int256 , int256 , int256) returns (int256 ,int256)
#define function mulZ(int256 , int256 , int256 , int256) returns (int256 ,int256)
#define function divZ(int256 , int256 , int256 , int256) returns (int256 ,int256)
#define function calcR(int256 , int256) returns (int256 ,int256)
#define function toPolar(int256 , int256) returns (int256 ,int256)
#define function fromPolar(int256 , int256) returns (int256 ,int256)
#define function p_atan2(int256 , int256) returns (int256)
#define function atan1to1(int256 ) returns (int256)
#define function ln(int256 , int256) returns (int256)
#define function sqrt(int256 , int256) returns (int256)
#define function expZ(int256 , int256) returns (int256 ,int256)
#define function pow(int256 , int256 , int256) returns (int256 ,int256)

#define macro MAIN() = takes (0) returns (0) {
   
   0x00 calldataload
   0xE0 shr

   dup1 __FUNC_SIG(addZ) eq addZ jumpi
   dup1 __FUNC_SIG(subZ) eq subZ jumpi
   dup1 __FUNC_SIG(mulZ) eq mulZ jumpi
   dup1 __FUNC_SIG(divZ) eq divZ jumpi
   dup1 __FUNC_SIG(calcR) eq calcR jumpi
   dup1 __FUNC_SIG(toPolar) eq toPolar jumpi
   dup1 __FUNC_SIG(fromPolar) eq fromPolar jumpi
   dup1 __FUNC_SIG(p_atan2) eq p_atan2 jumpi
   dup1 __FUNC_SIG(atan1to1) eq atan1to1 jumpi
   dup1 __FUNC_SIG(ln) eq ln jumpi
   dup1 __FUNC_SIG(sqrt) eq sqrt jumpi 
   dup1 __FUNC_SIG(expZ) eq expZ jumpi
        __FUNC_SIG(pow) eq pow jumpi
   0x00 0x00 revert

    addZ:
    ADD_Z_LOCAL()

    subZ:
    SUB_Z_LOCAL()

    mulZ:
    MUL_Z_LOCAL()

    divZ:
    DIV_Z_LOCAL()

    calcR:
    CALC_R_LOCAL()

    toPolar:
    TO_POLAR_LOCAL()

    fromPolar:
    FROM_POLAR_LOCAL()

    p_atan2:
    P_ATAN2_LOCAL()

    atan1to1:
    ATAN1TO1_LOCAL()

    ln:
    LN_LOCAL()

    sqrt:
    SQRT_LOCAL()

    expZ:
    EXP_Z_LOCAL()

    pow:
    POW_LOCAL()

}

#define macro ADD_Z_LOCAL() = takes(0) returns(0) {
    0x04 calldataload
    0x24 calldataload
    0x44 calldataload
    0x64 calldataload
    ADD_Z() 
    0x00 mstore
    0x20 mstore
    0x20 0x00 return
}

#define macro SUB_Z_LOCAL() = takes(0) returns(0) {
    0x04 calldataload
    0x24 calldataload
    0x44 calldataload
    0x64 calldataload
    SUB_Z() 
    0x00 mstore
    0x20 mstore
    0x20 0x00 return
}

#define macro MUL_Z_LOCAL() = takes(0) returns(0){
    0x04 calldataload
    0x24 calldataload
    0x44 calldataload
    0x64 calldataload
    MUL_Z()
    0x00 mstore
    0x20 mstore
    0x20 0x00 return
}

#define macro DIV_Z_LOCAL() = takes(0) returns(0){
    0x04 calldataload
    0x24 calldataload
    0x44 calldataload
    0x64 calldataload
    DIV_Z()
    0x00 mstore
    0x20 mstore
    0x20 0x00 return
}

#define macro CALC_R_LOCAL() = takes(0) returns(0){
    0x04 calldataload
    0x24 calldataload
    0x44 calldataload
    0x64 calldataload
    CALC_R()
    0x00 mstore
    0x20 mstore
    0x20 0x00 return
}

#define macro TO_POLAR_LOCAL() = takes(0) returns(0){
    0x04 calldataload
    0x24 calldataload
    TO_POLAR()
    0x00 mstore
    0x20 mstore
    0x20 0x00 return
}

#define macro FROM_POLAR_LOCAL() = takes(0) returns(0){
    0x04 calldataload
    0x24 calldataload
    FROM_POLAR()
    0x00 mstore
    0x20 mstore
    0x20 0x00 return
}

#define macro P_ATAN2_LOCAL() = takes(0) returns(0){
    0x04 calldataload
    0x24 calldataload
    P_ATAN2()
    0x00 mstore
    0x20 0x00 return

}

#define macro ATAN1TO1_LOCAL() = takes(0) returns(0){
    0x04 calldataload
    ATAN1TO1()
    0x00 mstore
    0x20 0x00 return

}

#define macro LN_LOCAL() = takes(0) returns(0){
    0x04 calldataload
    0x24 calldataload
    LN()
    0x00 mstore
    0x20 0x00 return

}

#define macro SQRT_LOCAL() = takes(0) returns(0){
    0x04 calldataload
    0x24 calldataload
    SQRT()
    0x00 mstore
    0x20 0x00 return

}

#define macro EXP_Z_LOCAL() = takes(0) returns(0){
    0x04 calldataload
    0x24 calldataload
    EXP_Z()
    0x00 mstore
    0x20 mstore
    0x20 0x00 return
}

#define macro POW_LOCAL() = takes(0) returns(0){
    0x04 calldataload
    0x24 calldataload
    0x44 calldataload
    POW()
    0x00 mstore
    0x20 mstore
    0x20 0x00 return
}


